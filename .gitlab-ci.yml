
stages:
  - test
  - release

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

variables:
  wget: "wget --quiet --tries=0"


.job-template: &job-template
  artifacts:
    name: "${CI_PROJECT_PATH}_${CI_JOB_STAGE}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA}"
    paths:
      - tor-android-binary/build/outputs/aar/*.aar
      - tor-android-binary/src/main/libs
      - external/include
      - external/lib
      - external/test
    expire_in: 1 week
    when: always

  after_script:
    - echo "Download debug artifacts from https://gitlab.com/${CI_PROJECT_PATH}/-/jobs"
    # this file changes every time but should not be cached
    - rm -f $GRADLE_USER_HOME/caches/modules-2/modules-2.lock
    - rm -fr $GRADLE_USER_HOME/caches/*/plugin-resolution/


.setup-template: &setup-template
- export LC_ALL=C.UTF-8
- export DEBIAN_FRONTEND=noninteractive
- echo Etc/UTC > /etc/timezone
- echo 'quiet "1";'
       'APT::Install-Recommends "0";'
       'APT::Install-Suggests "0";'
       'APT::Acquire::Retries "20";'
       'APT::Get::Assume-Yes "true";'
       'Dpkg::Use-Pty "0";'
      > /etc/apt/apt.conf.d/99gitlab
- apt-get update
- apt-get -qy dist-upgrade
- apt-get -qy install
      autoconf
      autogen
      automake
      autopoint
      autotools-dev
      gettext-base
      git
      libtool
      make
      patch
      pkg-config

- export GRADLE_USER_HOME=$PWD/.gradle
- export ANDROID_COMPILE_SDK=`sed -n 's,.*compileSdkVersion\s*\([0-9][0-9]*\).*,\1,p' tor-android-binary/build.gradle`
- export ANDROID_BUILD_TOOLS=`sed -nE 's,.*buildToolsVersion *.([0-9.]+).*,\1,p' tor-android-binary/build.gradle`
- echo y | $ANDROID_HOME/tools/bin/sdkmanager
      "platforms;android-${ANDROID_COMPILE_SDK}"
      "build-tools;$ANDROID_BUILD_TOOLS"
      > /dev/null
- rm -rf $PWD/android-ndk*
- ndk="android-ndk-r20"
- ndk_zip="${ndk}-linux-x86_64.zip"
- $wget http://dl.google.com/android/repository/$ndk_zip
- echo "57435158f109162f41f2f43d5563d2164e4d5d0364783a9a6fab3ef12cb06ce0  $ndk_zip" > ${ndk_zip}.sha256
- sha256sum -c ${ndk_zip}.sha256
- unzip -q $ndk_zip
- export ANDROID_NDK_HOME=`pwd`/$ndk

- export AVD_SDK=`echo $CI_JOB_NAME | awk '{print $2}'`
- export AVD_TAG=`echo $CI_JOB_NAME | awk '{print $3}'`
- export AVD_ARCH=`echo $CI_JOB_NAME | awk '{print $4}'`
- export AVD_PACKAGE="system-images;android-${AVD_SDK};${AVD_TAG};${AVD_ARCH}"
- echo $AVD_PACKAGE

- git submodule foreach git reset --hard
- git submodule foreach git clean -fdx
- git submodule sync
- git submodule update --init --force


.test-template: &test-template
  stage: test
  image: registry.gitlab.com/fdroid/ci-images-client:latest
  <<: *job-template
  script:
    - *setup-template

    - export V=0
    - ./tor-droid-make.sh build -a $AVD_ARCH
    - for f in tor-android-binary/src/main/libs/*/libtor.so; do sha256sum $f; done
    - for f in external/lib/*/libtor.so; do sha256sum $f; done

    - adb start-server
    - start-emulator
    - wait-for-emulator
    - adb devices
    - adb shell input keyevent 82 &

    # adb shell on older emulators didn't pass the return value, so we need tricks
    # https://stackoverflow.com/a/58452689
    - EXITVALUE=0
    - for f in test test-memwipe test-slow; do
        printf "\n\n------------------------------------------\n$f\n";
        adb -e push external/test/$AVD_ARCH/$f /data/local/tmp/;
        adb -e shell "cd /data/local/tmp; ./$f"'; echo -n $? > '"$f.result";
        test `adb -e shell "cat /data/local/tmp/$f.result"` = "0" || EXITVALUE=1;
      done
    - exit $EXITVALUE


no-accel 22 default x86_64:
  <<: *test-template

no-accel 24 default armeabi-v7a:
  <<: *test-template


release:
  stage: release
  image: openjdk:8-jdk
  <<: *job-template
  variables:
    ANDROID_SDK_TOOLS:   "4333796"
  script:
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -qq -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - chmod +x ./gradlew
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail

    - *setup-template

    - ./tor-droid-make.sh build
    - ./gradlew assemble
